api返回的数据，是以json格式返回的。用json格式，最省流量，而且几乎每种计算机语言都支持json格式。用xml的话，太耗费流量了，而且冗余数据多，不适合移动端。

1. 什么是api？

	当app调用api的时候，只需要明确下面３点:


	　　1.这个api是干啥的 


	　　2.知道要输入什么 


	　　3.知道结果是什么 


	　　至于api内部是怎么处理的，app根本无需理会。


	　　从这里可看出，api能在最大程度遮蔽了app后端复杂性，极大提高了app前端的开发效率。


2. api设计的8点

(1)Restful设计原则

(2) api的命名
	“望名知api”

(3)api的安全性

(4) api返回数据

	从后台的角度来说，api中返回的数据中，正确值和空值的类型必须一样，可以是“”，绝对禁止null值。

	对于客户端，必须用个全局的函数来处理所有api的返回数据，需要有一个机制：对于某个客户端需要数据，如果api中缺失，客户端自动补上并给予默认值。这个机制在我们的实践中大大减少了app的闪退。

3.如何处理api的版本升级

　在api的版本升级时，需要注意以下2点：

　　1. v2版本的api的controller必须要继承v1版的controller，v2版本的api只重写需要改动的api。

　　2. 在线api测试文档中详细标明返回内容，已作对比，方便客户端人员的调试。

(5)图片的处理

	策略：

	　　（1）客户端本地缓存图片，只有没有合适的图片，才去服务器取。

	　　（2）当客户端需要某种尺寸的图片，由客户端告诉服务端图片的尺寸，服务端动态生成并缓存起来。

		采用了这样的图片处理机制，数据库中只要有一个字段保存原图就行了，其它尺寸就由客户端告诉服务端动态生成。
		
		以后无论什么尺寸的图片，数据库中都不需要记录，数据库只有原图就行了。


	　　注意，现在的文件云存储服务（例如七牛，又拍云）等都提供了这个文件的缩放功能，而且能加速文件的上传下载速度，极大提升了app的用户体验，强烈推荐使用。

(6)返回的提示信息

	最科学的情况，服务端只返回信息代码，具体的文字提示由客户端决定。

(7)在线api测试文档


(8)在app启动时，调用一个初始化api获取必要的信息

	当发现本地app的版本已经低于最新的app版本，可提示用户更新。
	

3.如何处理api的版本升级

	当app做了大改版后，可能会出现一个问题，发现现在的api已经不适了，就考虑到api的升级，同时为了兼容已经发布的app，原来的api必须要保留。
	
	为了避免同一个app中调用不同版本的api，一般就会全部升级api的版本，
	
	例如:原来的是“test.com/v1/statuses/destroy”，
	升级为“test.com/v2/statuses/destroy”。


　　在api的版本升级时，需要注意以下2点：


　　1. v2版本的api的controller必须要继承v1版的controller，v2版本的api只重写需要改动的api。


　　2. 在线api测试文档中详细标明返回内容，已作对比，方便客户端人员的调试。

